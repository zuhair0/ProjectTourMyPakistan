@page "/login"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
<link rel="stylesheet" href="/css/style.css" />
<div class="row" style="margin-top:5%;">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <label><b>User-Name: </b></label>
            <input  @bind="model.UserName" class="form-control" placeholder="User Name" required/>
        </div>
        <div class="mb-3">
            <label><b>Password: </b></label>
            <input type="password" @bind="model.Password" class="form-control" placeholder="Password" required/>
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
        <div class="row">
            <div class="mb-3 d-grid gap-2 col-6">
                <button class="btn btn-success">
                    <a href="registration/User" style="text-decoration:none; color:white">Sign-up as User</a>
                </button>
            </div>
            <div class="mb-3 d-grid gap-2 col-6">
                <button class="btn btn-success">
                    <a href="registration/Tourguide" style="text-decoration:none; color:white">Sign-up as Tour-Guide</a>
                </button>
            </div>
        </div>
        
    </div>
</div>
@code {
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if(userAccount==null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("Invalid Username or Password");
            return;
        }
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role,
                user_fkid=userAccount.user_fkid
            });
        navManager.NavigateTo("/", true);
    }
}
